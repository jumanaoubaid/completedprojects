//SkewHeap.cpp
using namespace std ;
#include "SkewHeap.h"


// Constructor.  Must specify priority function.
SkewHeap::SkewHeap(pri_fn pri){
    priority = pri;
    m_heap = nullptr;
}

// Destructor
SkewHeap::~SkewHeap(){
    recursiveDelete(m_heap);

}
void SkewHeap::recursiveDelete(Node* root){
    if(root == nullptr){
        return;
    }
    recursiveDelete(root->left);
    recursiveDelete(root->left);
    delete root;
    root = nullptr;
}

//copy constructor 
SkewHeap::SkewHeap(const SkewHeap& rhs){
    preorder(rhs.m_heap);

}
//helper function for copy contructor 
void SkewHeap::preorder(Node *root){
    if ( root == nullptr ) return;
    if(root->tagged_union == ISINT){
        Node *newNode = new Node(root->data_int);
       }
    else{
        Node *newNode = new Node(root->data_string);
    
    preorder(root->left);
    preorder(root->right);
}
}
//assignment operator 
const SkewHeap& SkewHeap::operator=(const SkewHeap& rhs){
    if(this != &rhs){
        
        //m_heap = preorder(rhs);
    }
    return *this;
}

// Priority function get and set
pri_fn SkewHeap::getPriFn() const{
    return priority;

}

void SkewHeap::setPriFn (pri_fn pri){
    priority = pri; 
}
// Return true if the skew heap is empty
bool SkewHeap::empty() const{
    if(m_heap == nullptr){
        return true;
    }
    return false;
}

// Overloaded insertion operators: string data

void SkewHeap::insert(string data){
    Node *temp = new Node(data);
   // temp->tagged_union = ISSTRING;
    //temp->data_string = data;
    m_heap = merge(m_heap, temp);


}
// integer data.
void SkewHeap::insert(int data){
    Node *temp = new Node(data);
    m_heap = merge(m_heap, temp);
}

// Access highest priority element in the skew heap.
Node* SkewHeap::front() const{
    if(m_heap == nullptr){
        return nullptr;
    }
    return m_heap;
}

// Remove the highest priority element from the skew heap.
void SkewHeap::removeTop(){
    if(m_heap == nullptr){
        return;
    }
    Node *temp = m_heap;
    /*
    Node *temp2;
    temp = m_heap->left;
    temp2 = m_heap->right;
    delete m_heap;
    */
    //delete temp;
    m_heap = merge(m_heap->left, m_heap->right);
    delete temp;
    temp = nullptr;

}

// Merge two heaps.  Merged heap in *this; sh is empty afterwards.
void SkewHeap::skewHeapMerge(SkewHeap& sh){
    m_heap = merge(m_heap, sh.m_heap);
}

Node* SkewHeap::merge(Node* p1, Node* p2){
    Node *temp;
    if(p1 == nullptr){
        return p2;
    }
    if(p2 == nullptr){
        return p1;
    }
    if (priority(p1) < priority(p2)){
        temp = p1;
        p1 = p2;
        p2 = temp;
    }
    temp = p1->left;
    p1->left = p1->right;
    p1->right = temp;
    p1->left = merge(p1->left, p2);
    
    return p1;
}


// Print inorder traversal.
void SkewHeap::inorder() const{
    recursiveInorder(m_heap);
}
void SkewHeap::recursiveInorder(const Node* m_heap)const{
     if (m_heap == nullptr){
        return;
    }
    else{
       cout << "("; 
       recursiveInorder(m_heap->left);

       if(m_heap->tagged_union == ISINT){
           cout << m_heap->data_int;
       }
       else{
           cout << m_heap->data_string;
       }
       
       recursiveInorder(m_heap->right);
       cout << ")";
    }
}
 
// Dump the contents of the heap in decreasing priority order.
void SkewHeap::dump() const{
    cout << "IN DUMP" << endl;
    SkewHeap newHeap(*this);
    cout << "AFTER CREATING NEW SKEWHEAP" << endl;
    while(newHeap.m_heap != nullptr){
        //cout << "Data is:   ";
        if(newHeap.m_heap->tagged_union == ISINT){
           cout << "Data is: " << newHeap.m_heap->data_int;
       }
        else{
           cout << "Data is: " << newHeap.m_heap->data_string;
      }

        cout << "    Priority is:   " << newHeap.priority(m_heap) << endl;
        newHeap.removeTop();
    }
}